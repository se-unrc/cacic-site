<html>
<head>
<title>Font Awesome 5 Icons</title>
<meta name='viewport' content='width=device-width, initial-scale=1'>
<script src='https://kit.fontawesome.com/a076d05399.js'></script>
<!--Get your own code at fontawesome.com-->
</head>

<section class="page-title">
  <div class="container">
    <h2>Charla de Empresas</h2>
    <ul class="list-inline">
      <li><a href="/">Home</a></li>
      <li><a href="#"><i class="fa fa-angle-right"></i> Congreso</a></li>
    </ul><!-- /.list-inline -->
  </div><!-- /.container -->
</section><!-- /.page-title -->


<section class="school">
  <div>
    <center>
      <h2>Charlas de Empresas </h2>
    </center>
  </div>

<ul class="courses">
      <li>
        <h3> <bold>Charla 1</bold>: <a href="#" onclick="toggleCourse('charla1'); return false;">Contract testing de APIs RESTful</a></h3>
       
        <h4> A cargo de: Agustina Aldasoro y Lucas Simonelli. <%= link_to 'Medallia', 'https://www.medallia.com/', target: '_blank' %>
       </h4>  

        <div id="charla1" class="description">
          <strong>Abstract</strong> <br>
          En Medallia, hoy en día, existen más de 200 REST APIs funcionando. Para que éstas puedan ser utilizadas con éxito, necesitan tener un contrato claro, y garantizar que su implementación lo cumpla. Por lo tanto el proceso de desarrollo de APIs tiene dos componentes fundamentales, una sintáctica y la otra semántica:
          Al dar forma a una API, se define primero su contrato, usando un subconjunto del Open API spec, un lenguaje de especificación de APIs basado en YAML. A continuación,  nuestras herramientas de desarrollo generan las interfaces necesarias para implementar esta funcionalidad en base al contrato definido. De esta forma, se puede garantizar que la implementación hace lo que la especificación define, y así se garantiza la consistencia sintáctica.
          Siendo el ecosistema de APIs de Medallia tan diverso, una condición importante es que todas las APIs deben ser semánticamente consistentes entre sí. Esto es, queremos que cada API de Medallia respete ciertos estándares. Para esto, existe el API Spec de Medallia, que es un conjunto de reglas semánticas basado en una especialización de Open API Spec 2.0 que toda API en Medallia debe seguir.
          Esto último plantea un problema: ¿cómo se puede asegurar que todas las APIs cumplan dichas reglas si éstas últimas muchas veces son sólo explícitas al ver la API en acción?
          En esta charla vamos a presentar el testing harness que desarrollamos para responder ese interrogante, y cómo éste se integra de forma orgánica con el ecosistema de APIs existente.
        </div>
      </li>
   
  
      <li>
        <h3> <bold>Charla 2</bold>: <a href="#" onclick="toggleCourse('charla2'); return false;">Crystal: Fundamentos, objetivos y desafios</a></h3>
       
        <h4> A cargo de: Juan Wajnerman y Brian Cardiff. <%= link_to 'Manas', 'https://manas.tech', target: '_blank' %>
       </h4>  
       <h5> <i class='fas fa-calendar-alt'></i> Martes 15 de Octubre. 15hs </h5> 

        <div id="charla2" class="description">
          <strong>Abstract</strong> <br>
          Una efectiva introducción al lenguaje para entender sus fundamentos y virtudes. Revisar algunos de los desafíos que aplican al diseño de un lenguaje eficiente. Conoceremos también parte del ecosistema actual para hacer distintos tipos de aplicaciones y en qué situaciones se puede tener ventajas al usar Crystal.
        </div>
      </li>
    </ul>

</section>


<script type="text/javascript">
function toggleCourse(id) {
  $(`.school ul.courses li div#${id}`).toggle();
}
</script>
